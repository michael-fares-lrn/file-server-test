/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./question.js":
/*!*********************!*\
  !*** ./question.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _question_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./question/index */ \"./question/index.js\");\n/* harmony import */ var _scss_main_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../scss/main.scss */ \"../scss/main.scss\");\n\n\n/*global LearnosityAmd*/\n\nLearnosityAmd.define([], function () {\n  return {\n    Question: _question_index__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9xdWVzdGlvbi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7QUFBQTtBQUNBO0FBRUE7O0FBQ0FDLGFBQWEsQ0FBQ0MsTUFBZCxDQUFxQixFQUFyQixFQUF5QixZQUFZO0FBQ2pDLFNBQU87QUFDSEYsSUFBQUEsUUFBUSxFQUFSQSx1REFBUUE7QUFETCxHQUFQO0FBR0gsQ0FKRCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3F1ZXN0aW9uLmpzP2Q4YzciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFF1ZXN0aW9uIGZyb20gJy4vcXVlc3Rpb24vaW5kZXgnO1xuaW1wb3J0ICcuLi9zY3NzL21haW4uc2Nzcyc7XG5cbi8qZ2xvYmFsIExlYXJub3NpdHlBbWQqL1xuTGVhcm5vc2l0eUFtZC5kZWZpbmUoW10sIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBRdWVzdGlvblxuICAgIH07XG59KTtcbiJdLCJuYW1lcyI6WyJRdWVzdGlvbiIsIkxlYXJub3NpdHlBbWQiLCJkZWZpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./question.js\n");

/***/ }),

/***/ "./question/constants.js":
/*!*******************************!*\
  !*** ./question/constants.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"PREFIX\": () => (/* binding */ PREFIX)\n/* harmony export */ });\n/**\n * When creating a Learnosity Custom Question, itâ€™s important to prefix the CSS class names being used inside\n * your custom Question UI.\n * You should avoid using a generic class name like `.btn`.\n * Instead, you should add a prefix to it like `.company-name-my-custom-question-btn`\n * to avoid CSS conflict with the host page and the CSS used by the Learnosity API.\n */\nvar PREFIX = 'lrn-custom-question';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9xdWVzdGlvbi9jb25zdGFudHMuanMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sSUFBTUEsTUFBTSxHQUFHLHFCQUFmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vcXVlc3Rpb24vY29uc3RhbnRzLmpzP2M5YjkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBXaGVuIGNyZWF0aW5nIGEgTGVhcm5vc2l0eSBDdXN0b20gUXVlc3Rpb24sIGl04oCZcyBpbXBvcnRhbnQgdG8gcHJlZml4IHRoZSBDU1MgY2xhc3MgbmFtZXMgYmVpbmcgdXNlZCBpbnNpZGVcbiAqIHlvdXIgY3VzdG9tIFF1ZXN0aW9uIFVJLlxuICogWW91IHNob3VsZCBhdm9pZCB1c2luZyBhIGdlbmVyaWMgY2xhc3MgbmFtZSBsaWtlIGAuYnRuYC5cbiAqIEluc3RlYWQsIHlvdSBzaG91bGQgYWRkIGEgcHJlZml4IHRvIGl0IGxpa2UgYC5jb21wYW55LW5hbWUtbXktY3VzdG9tLXF1ZXN0aW9uLWJ0bmBcbiAqIHRvIGF2b2lkIENTUyBjb25mbGljdCB3aXRoIHRoZSBob3N0IHBhZ2UgYW5kIHRoZSBDU1MgdXNlZCBieSB0aGUgTGVhcm5vc2l0eSBBUEkuXG4gKi9cbmV4cG9ydCBjb25zdCBQUkVGSVggPSAnbHJuLWN1c3RvbS1xdWVzdGlvbic7XG4iXSwibmFtZXMiOlsiUFJFRklYIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./question/constants.js\n");

/***/ }),

/***/ "./question/index.js":
/*!***************************!*\
  !*** ./question/index.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Question)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"./question/constants.js\");\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n\n\nvar Question = /*#__PURE__*/function () {\n  function Question(init, lrnUtils) {\n    var _this = this;\n\n    _classCallCheck(this, Question);\n\n    this.init = init;\n    this.events = init.events;\n    this.lrnUtils = lrnUtils;\n    this.el = init.$el.get(0);\n    this.render().then(function () {\n      _this.registerPublicMethods();\n\n      _this.handleEvents();\n\n      var facade = init.getFacade(); // after your question renders, then check if you are on the first item edit screen and the preview should be shown\n      // by calling the shouldShowPlaceholder() method implemented on the facade\n\n      console.log(\"facade.shouldShowPlaceholder()\", facade.shouldShowPlaceholder()); // returns true if in item edit and false otherwise\n\n      if (facade.shouldShowPlaceholder() === false) {\n        // set the display of the placeholder to none;\n        _this.el.querySelector('.placeholder-content').style.display = 'none';\n      }\n      /**\n       * @param { String } init.state - the state of Questions API.\n       * state can be any of the following 3 strings\n       * \"initial\" for first starting the assessment,\n       * \"resume\" for coming back to a previously started assessment,\n       * \"review\" for showing the completed assessment and results to the learner or teacher\n       */\n\n\n      if (init.state === 'resume') {\n        /**\n         * If you want your custom question to support resume state\n         * (For a learner to be able to come back to your question in a future sitting after having previously started and saved the assessment),\n         * then make make sure to update your question's UI to display the previously saved response Questions API has stored in the back end.\n         */\n        // EXAMPLE implementation:\n        // if(init.response) {\n        //     // This example assumes a simple DOM input for the custom question's UI, and updates its value to the value of the saved response upon resume. \n        //     document.getElementById('my-input').value = init.response.value;\n        // }\n      }\n\n      if (init.state === 'review') {\n        /**\n        * If you want your custom question to support review state\n        * (For a learner or instructor to be able to view their results in a read-only mode after having completed and submitted the assessment),\n        * then make make sure to update your question's UI to display the previously submitted response Questions API has stored in the back end.\n        * NOTE: this is required if you intend to use Reports API with your custom question (for example the session-detail-by-item report).\n        */\n        // EXAMPLE implementation:\n        // if(init.response) {\n        //     // This example assumes a simple DOM input for the custom questions UI, and updates its value to the value of the submitted response upon review. \n        //     document.getElementById('my-input').value = init.response.value;\n        // }\n\n        /**\n         * below, we call the disable public method on the custom question to display it in a read-only mode\n         * to learners and/or instructors viewing the completed results.\n         * (Please see this.registerPublicMethods below for more detials about the .disable() method, including an example implementation)\n         */\n        init.getFacade().disable();\n      }\n\n      init.events.trigger('ready');\n    });\n  }\n\n  _createClass(Question, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var el = this.el,\n          init = this.init,\n          lrnUtils = this.lrnUtils;\n      var question = init.question,\n          response = init.response; // TODO: Requires implementation\n\n      el.innerHTML = \"\\n            <div class=\\\"\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__.PREFIX, \" lrn-response-validation-wrapper\\\">\\n                <div class=\\\"lrn_response_input\\\">\\n                    <!-- PLACEHOLDER CONTENT SHOWN BY DEFAULT, covering up the dybamic data vars that cannot be shown yet  -->\\n                <div class=\\\"placeholder-content\\\" style=\\\"position: absolute; background-color: lightblue; height: 100%; width: 100%; z-index: 100;\\\">PLACEHOLDER CONTENT</div>\\n                     <!-- PLACEHOLDER CONTENT SHOWN BY DEFAULT  -->\\n                <div class=\\\"question-container\\\" style=\\\" display: flex; align-items: center; justify-content: center;\\\"><div>\\n                </div>            \\n                <div class=\\\"\").concat(_constants__WEBPACK_IMPORTED_MODULE_0__.PREFIX, \"-checkAnswer-wrapper\\\"></div>\\n                <div class=\\\"\").concat(_constants__WEBPACK_IMPORTED_MODULE_0__.PREFIX, \"-suggestedAnswers-wrapper\\\"></div>\\n            </div>\\n        \"); // Optional - Render optional Learnosity components like Check Answer Button, Suggested Answers List\n      // first before rendering your question's components\n\n      return Promise.all([lrnUtils.renderComponent('SuggestedAnswersList', el.querySelector(\".\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__.PREFIX, \"-suggestedAnswers-wrapper\"))), lrnUtils.renderComponent('CheckAnswerButton', el.querySelector(\".\".concat(_constants__WEBPACK_IMPORTED_MODULE_0__.PREFIX, \"-checkAnswer-wrapper\")))]).then(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            suggestedAnswersList = _ref2[0];\n\n        _this2.suggestedAnswersList = suggestedAnswersList; // render the custom question contents normally\n\n        var questionContainer = _this2.el.querySelector(\".question-container\");\n\n        questionContainer.innerHTML = \"\".concat(question.a, \" + \").concat(question.b, \" =  <input class=\\\"answer-input\\\" type=\\\"text\\\"> ?\");\n      });\n    }\n    /**\n     * Add public methods to the created question instance that is accessible during runtime\n     *\n     * Example: questionsApp.question('my-custom-question-response-id').myNewMethod();\n     * \n     */\n\n  }, {\n    key: \"registerPublicMethods\",\n    value: function registerPublicMethods() {\n      var _this3 = this;\n\n      var init = this.init; // Attach the methods you want on this object\n\n      var facade = init.getFacade();\n\n      facade.shouldShowPlaceholder = function () {\n        var questionIsInAuthoringEnvironment = window.LearnosityAuthor !== undefined;\n        console.log(\"inside facade.shouldShowPlaceholder() > questionIsInAuthoringEnvironment value is: \", questionIsInAuthoringEnvironment);\n        var itemEditScreenOverlay = document.querySelector('.lrn-author-widget-mask[style=\"display: block;\"]');\n        return questionIsInAuthoringEnvironment && itemEditScreenOverlay != null;\n      };\n\n      facade.disable = function () {// TODO: Requires implementation\n\n        /**\n         * The purpose of this method is to prevent learner interaction with your question's UI.\n         * \n         * If you plan to display your custom question in \"review\" state, then you need to implement this\n         * method to prevent a learner or instructor who is reviewing their completed results from being able to change the responses in your question UI.\n         */\n        // EXAMPLE implementation\n        // document.getElementById('my-input').setAttribute('disabled', true)\n      };\n\n      facade.enable = function () {\n        /**\n         * The purpose of this method is to re-enable learner interaction with your question's UI\n         * after it has been previously disabled.\n         *               \n         * (For example, you plan to temporarily disable the question UI for a student taking the assessment until they complete another task like spend a set time reading the instructions.)\n         */\n        // EXAMPLE implementation\n        // document.getElementById('my-input').removeAttribute('disabled')\n      };\n\n      facade.resetResponse = function () {\n        /**\n         * The purpose of this method is to support removal of a previously entered response to your custom question\n         * and restoring the question to its initial blank state before a response was entered.\n         * (For example, in a multiple choice question where a student has picked a choice, you reset the question so that no choices are picked at all.)\n         */\n        // TODO: Requires implementation, you could use the following steps\n        // trigger a 'resetResponse' event to reset the value of response\n        // this.events.trigger('resetResponse');\n        // reset other states if you need\n        // re-render the component, manage the 'reset' state by yourself\n      };\n\n      facade.showValidationUI = function () {\n        // TODO: requires implementation\n\n        /**\n         * The purpose of this method is to update your custom question's UI with visual feedback \n         * after the learner presses the Check Answer button.\n         * \n         * The following is an example implementation that shows the standard Learnosity \"checkmark / tick\" for a correct answer\n         * or the standard Learnosity \"x mark / cross\" for an incorrect answer. \n         */\n        // EXAMPLE implemetation:\n        var answerIsCorrect = facade.isValid();\n        /**\n         * update the UI based on the result\n         * IMPORTANT: In both cases we need to target the element with the classname lrn_response_input\n         */\n\n        if (answerIsCorrect) {\n          /** if the answer is correct we will add the Learnosity utility class lrn_correct, which will automatically show the Learnosity\n           * checkmark (tick) you are used to on regular Learnosity quesiton types\n           */\n          _this3.el.querySelector(\".lrn_response_input\").classList.add(\"lrn_correct\");\n        } else {\n          /** if the answer is incorrect we will add the Learnosity utility class lrn_incorrect, which will automatically show the Learnosity\n           * x (cross) you are used to on regular Learnosity quesiton types\n           */\n          _this3.el.querySelector(\".lrn_response_input\").classList.add(\"lrn_incorrect\");\n        }\n      };\n\n      facade.resetValidationUI = function () {\n        // TODO: requires implementation\n\n        /**\n         * If you implement showValidationUI() above, then you need to implement this method also.\n         * \n         * If the user enters a response to your custom question, presses the Check Answer button, and then changes their response to something new,\n         * you now need to remove the feedback UI that you had displayed for the previous response. This is exactly the purpose of this method.\n         * \n         * The following is an example implementation that removes the standard Learnosity validation UI (\"checkmark / tick\" if the previous response was correct\n         * or \"x mark / cross\" if the previous response was incorrect).\n         */\n        // Example implementation:\n        // // we will remove the Learnosity checkmark or x previously showing\n        _this3.el.querySelector(\".lrn_response_input\").classList.remove(\"lrn_correct\");\n\n        _this3.el.querySelector(\".lrn_response_input\").classList.remove(\"lrn_incorrect\"); // // if we chose to also display the correct answer, we will now remove the display of the correct answer as well by \n        // // leveraging the suggestedAnswersList.reset() method.\n\n\n        _this3.suggestedAnswersList.reset();\n      };\n    }\n  }, {\n    key: \"handleEvents\",\n    value: function handleEvents() {\n      var events = this.events,\n          init = this.init;\n      var question = init.question;\n      var facade = init.getFacade(); // TODO: Requires implementation - Make sure you trigger 'changed' event after the user changes their responses to your custom quesiton:\n\n      /**\n       * \n       * When you consider that the response to your question has been changed, \n       * (such when a user clicks the choice of a multiple choice question or enters text into a free response question),\n       * then you must trigger the changed event to inform Questions API that the question has been attempted.\n       * \n       * To do this, you must call events.trigger('changed', responses);  \n       * This call should take place inside of a DOM event listener in which the user has changed their response to your question\n       * (such as a 'click' event listener for a multiple choice question, or an input 'change' event listener for a free response text question)\n       * \n       * @param responses The 'responses' variable can be any data type you would like it to be depending on the format of your custom question's responses. \n       * For instance, it might be a string for the value of a simple text input\n       * Or for a quesiton asking a student to plot coorinates on a graph, it might be an object containing the x and y coordinates, e.g.\n       *     {\n       *       x: 123,\n       *       y: 408\n       *     }\n       */\n\n      this.el.querySelector('.answer-input').addEventListener('input', function (event) {\n        // STEP 1: when the user clicks on your custom question's input, save its current value as the value of responses\n        var responses = event.target.value; // STEP 2: \n        // now notfy Questions API that the user has changed their response\n\n        events.trigger('changed', responses); // STEP 3, if the validation UI is showing, then reset it\n\n        facade.resetValidationUI();\n      }); // \"validate\" event can be triggered when Check Answer button is clicked or when public method .validate() is called\n      // so developer needs to listen to this event to decide if he wants to display the correct answers to user or not\n      // options.showCorrectAnswers will tell if correct answers for this question should be display or not.\n      // The value showCorrectAnswers by default is the value of showCorrectAnswers inside initOptions object that is used\n      // to initialize question app or the value of the options that is passed into public method validate (like question.validate({showCorrectAnswers: false}))\n\n      events.on('validate', function (options) {\n        // OPTIONAL Step 1: \n        //If you want to show changes to the UI for a correct or incorrect answer when the learner presses check answer\n        // then make sure you have also implemented facade.showValidationUI(), and that you call it here:\n        facade.showValidationUI();\n      });\n    }\n  }]);\n\n  return Question;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./question/index.js\n");

/***/ }),

/***/ "../scss/main.scss":
/*!*************************!*\
  !*** ../scss/main.scss ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n// extracted by mini-css-extract-plugin\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vc2Nzcy9tYWluLnNjc3MuanMiLCJtYXBwaW5ncyI6IjtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4uL3Njc3MvbWFpbi5zY3NzP2U1MTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQge307Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../scss/main.scss\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./question.js");
/******/ 	
/******/ })()
;